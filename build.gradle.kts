import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jetbrains.kotlin.util.capitalizeDecapitalize.toUpperCaseAsciiOnly
import java.io.ByteArrayOutputStream

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    `java-library`
    kotlin("jvm") version "2.0.20"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    java
    application
    id("maven-publish")
    id("org.jetbrains.kotlin.plugin.serialization") version "2.0.20"
    id("org.jetbrains.compose") version "1.6.11"
    id("org.jetbrains.kotlin.plugin.compose") version "2.0.20"
    kotlin("plugin.lombok") version "2.0.20"
    id("io.freefair.lombok") version "8.10"
}

group = "icu.takeneko"
version = properties["version"]!!

java {
    withJavadocJar()
    withSourcesJar()
}

getComponents().withType(AdhocComponentWithVariants::class.java).forEach { c ->
    c.withVariantsFromConfiguration(project.configurations.shadowRuntimeElements.get()) {
        skip()
    }
}

publishing {
    repositories {
        mavenLocal()
        maven {
            name = "NekoMavenRelease"
            url = uri("https://maven.takeneko.icu/releases")
            credentials {
                username = project.findProperty("nekomaven.user") as String? ?: System.getenv("NEKO_USERNAME")
                password = project.findProperty("nekomaven.password") as String? ?: System.getenv("NEKO_TOKEN")
            }
        }
    }
    publications {
        create<MavenPublication>("mavenJava") {
            from(components["java"])
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
        }
    }
}

application {
    mainClass.set("icu.takeneko.omms.central.main.Main")
}

description = "omms-central"
java.sourceCompatibility = JavaVersion.VERSION_17

tasks.withType<KotlinCompile> {
    compilerOptions{
        jvmTarget.set(JvmTarget.JVM_17)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    google()
    maven {
        url = uri("https://libraries.minecraft.net")
    }
    maven {
        url = uri("https://repo.opencollab.dev/maven-releases/")
    }
    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
    maven {
        url = uri("https://jcenter.bintray.com/")
    }
    maven("https://maven.pkg.jetbrains.space/public/p/compose/dev")
    maven("https://source.korostudio.cn/repository/maven-releases/")
}

val osName = System.getProperty("os.name")
val targetOs = when {
    osName == "Mac OS X" -> "macos"
    osName.startsWith("Win") -> "windows"
    osName.startsWith("Linux") -> "linux"
    else -> error("Unsupported OS: $osName")
}

var targetArch = when (val osArch = System.getProperty("os.arch")) {
    "x86_64", "amd64" -> "x64"
    "aarch64" -> "arm64"
    else -> error("Unsupported arch: $osArch")
}

val versionSkiko = "0.7.9" // or any more recent version
val target = "${targetOs}-${targetArch}"


tasks {
    shadowJar {
        archiveClassifier.set("$target-full")
    }
}

dependencies {
    api("io.ktor:ktor-server-auth:2.0.2")
    api("io.ktor:ktor-server-auth-jvm:2.0.2")
    api("uk.org.lidalia:sysout-over-slf4j:1.0.2")
    api("org.jline:jline:3.21.0")
    api("com.mojang:brigadier:1.0.18")
    api("com.mojang:datafixerupper:6.0.8"){
        exclude(group = "org.slf4j")
        exclude(group = "com.google.code.gson")
    }
    api("io.ktor:ktor-server-call-logging-jvm:2.0.2")
    api("io.ktor:ktor-server-content-negotiation-jvm:2.0.2")
    api("io.ktor:ktor-server-core-jvm:2.0.2")
    api("io.ktor:ktor-serialization-kotlinx-json-jvm:2.0.2")
    api("io.ktor:ktor-serialization-gson-jvm:2.0.2")
    api("io.ktor:ktor-server-netty-jvm:2.0.2")
    api("com.google.code.gson:gson:2.9.0")
    api("org.slf4j:slf4j-api:1.7.36")
    api("ch.qos.logback:logback-classic:1.2.11")
    api("ch.qos.logback:logback-core:1.2.11")
    api("org.jetbrains:annotations:23.0.0")
    api("org.jetbrains.kotlin:kotlin-stdlib:2.0.0")
    api("io.netty:netty-all:4.1.77.Final")
    api("com.github.oshi:oshi-core:6.1.6")
    api("net.java.dev.jna:jna:5.11.0")
    api("net.java.dev.jna:jna-platform:5.11.0")
    api("io.ktor:ktor-serialization-kotlinx-json:2.0.2")
    api("io.ktor:ktor-server-content-negotiation:2.0.2")
    api("me.xdrop:fuzzywuzzy:1.4.0")
    api("io.ktor:ktor-client-core-jvm:2.1.2")
    api("io.ktor:ktor-client-cio:2.1.2")
    api("io.ktor:ktor-client-cio-jvm:2.1.2")
    api("io.ktor:ktor-client-websockets:2.1.2")
    api("io.ktor:ktor-client-auth-jvm:2.1.2")
    api("io.ktor:ktor-client-auth:2.1.2")
    api("commons-io:commons-io:2.11.0")
    api("cn.hutool:hutool-all:5.8.11")
    api("io.ktor:ktor-http:2.2.3")
    api("com.github.gotson:sqlite-jdbc:3.32.3.8")
    api("io.ktor:ktor-client-serialization:2.2.3")
    api("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    api("io.ktor:ktor-server-websockets-jvm:2.0.2")
    api("net.bytebuddy:byte-buddy-agent:1.14.0")
    api("org.jetbrains.kotlinx:kotlinx-coroutines-swing:1.5.0")
    api("org.jetbrains.skiko:skiko-awt-runtime-$target:$versionSkiko")
    api("black.ninia:jep:4.2.0")


    api(compose.desktop.currentOs)
    api(compose.components.resources)
    api(compose.material3)

    testImplementation(platform("org.junit:junit-bom:5.9.1"))
    testImplementation("org.junit.jupiter:junit-jupiter")

    compileOnly("org.projectlombok:lombok:1.18.34")
    annotationProcessor("org.projectlombok:lombok:1.18.34")

    testCompileOnly("org.projectlombok:lombok:1.18.34")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.34")
}

tasks{
    test{
        useJUnitPlatform()
    }
}

task("generateProperties") {
    doLast {
        generateProperties()
    }
}

tasks.getByName("processResources") {
    dependsOn("generateProperties")
}

fun getGitBranch(): String {
    val stdout = ByteArrayOutputStream()
    try {
        exec {
            commandLine("git", "symbolic-ref", "--short", "-q", "HEAD")
            standardOutput = stdout
            isIgnoreExitValue = true
        }
        return stdout.toString(Charsets.UTF_8).trim()
    } catch (_: Exception) {
        return "undefined"
    } finally {
        stdout.close()
    }
}

fun getCommitId(): String {
    val stdout = ByteArrayOutputStream()
    try {
        exec {
            commandLine("git", "rev-parse", "HEAD")
            standardOutput = stdout
            isIgnoreExitValue = true
        }
        return stdout.toString(Charsets.UTF_8).trim()
    } catch (_: Exception) {
        return "undefined"
    } finally {
        stdout.close()
    }
}

fun generateProperties() {
    val propertiesFile = file("./src/main/resources/build.properties")
    if (propertiesFile.exists()) {
        propertiesFile.delete()
    }
    propertiesFile.createNewFile()
    val m = mutableMapOf<String, String>()
    propertiesFile.printWriter().use { writer ->
        properties.forEach {
            val str = it.value.toString()
            if("MAVEN" in it.key) return@forEach
            if ("@" in str || "(" in str || ")" in str || "extension" in str || "null" == str || "\'" in str || "\\" in str || "/" in str) return@forEach
            if ("PROJECT" in str.toUpperCaseAsciiOnly() || "PROJECT" in it.key.toUpperCaseAsciiOnly() || " " in str) return@forEach
            if ("GRADLE" in it.key.toUpperCaseAsciiOnly() || "GRADLE" in str.toUpperCaseAsciiOnly() || "PROP" in it.key.toUpperCaseAsciiOnly()) return@forEach
            if ("." in it.key || "TEST" in it.key.toUpperCaseAsciiOnly()) return@forEach
            if (it.value.toString().length <= 2) return@forEach
            m += it.key to str
        }
        m += "buildTime" to System.currentTimeMillis().toString()
        m += "branch" to getGitBranch()
        m += "commitId" to getCommitId()
        m.toSortedMap().forEach {
            writer.println("${it.key} = ${it.value}")
        }
    }
}